name: Build and Release Binaries

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Bundle with esbuild
        run: |
          npx esbuild src/index.js \
            --bundle --platform=node --format=cjs \
            --external:sharp --external:qrcode-terminal --external:jimp --external:link-preview-js \
            --target=node22 --outfile=out.js

      - name: Generate binaries
        run: |
          mkdir -p build
          npx -y @yao-pkg/pkg out.js -t node22-linux-x64   --options no-warnings -o build/WA2DC-Linux
          npx -y @yao-pkg/pkg out.js -t node22-linux-arm64 --options no-warnings -o build/WA2DC-Linux-arm64
          npx -y @yao-pkg/pkg out.js -t node22-macos-x64   --options no-warnings -o build/WA2DC-macOS
          npx -y @yao-pkg/pkg out.js -t node22-win-x64     --options no-warnings --no-bytecode \
                                                      --public --public-packages "*" -o build/WA2DC.exe

      - name: Generate checksums
        run: |
          sha256sum build/WA2DC-* > /dev/null   # prime the checksum file names
          sha256sum build/WA2DC-Linux         > build/WA2DC-Linux.sha256
          sha256sum build/WA2DC-Linux-arm64   > build/WA2DC-Linux-arm64.sha256
          sha256sum build/WA2DC-macOS         > build/WA2DC-macOS.sha256
          sha256sum build/WA2DC.exe           > build/WA2DC.exe.sha256

      - name: Sign binaries
        env:
          SIGN_KEY: ${{ secrets.SIGN_KEY }}
        run: |
          echo "$SIGN_KEY" > private.pem
          openssl dgst -sha256 -sign private.pem -out build/WA2DC-Linux.sig        build/WA2DC-Linux
          openssl dgst -sha256 -sign private.pem -out build/WA2DC-Linux-arm64.sig  build/WA2DC-Linux-arm64
          openssl dgst -sha256 -sign private.pem -out build/WA2DC.exe.sig          build/WA2DC.exe
          rm private.pem

      - name: Derive tag from package.json
        id: tag
        run: |
          VERSION=$(jq -r '.version' package.json)
          if [[ -z "$VERSION" ]]; then
            echo "Version not found in package.json" >&2
            exit 1
          fi
          echo "value=v$VERSION" >> "$GITHUB_OUTPUT"

      - name: Create / update GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ steps.tag.outputs.value }}"

          ASSETS=(
            build/WA2DC-Linux
            build/WA2DC-Linux.sha256
            build/WA2DC-Linux.sig
            build/WA2DC-Linux-arm64
            build/WA2DC-Linux-arm64.sha256
            build/WA2DC-Linux-arm64.sig
            build/WA2DC-macOS
            build/WA2DC-macOS.sha256
            build/WA2DC.exe
            build/WA2DC.exe.sha256
            build/WA2DC.exe.sig
          )

          # gh release create will automatically create the tag if it doesn't exist
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Updating existing release $TAG…"
            gh release upload "$TAG" "${ASSETS[@]}" --clobber
          else
            echo "Creating new release $TAG…"
            gh release create "$TAG" --target "${{ github.sha }}" --generate-notes --latest "${ASSETS[@]}"
          fi

          echo "✅ Release ready:"
          gh release view "$TAG" --json url --jq .url
